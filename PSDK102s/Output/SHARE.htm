<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\Output\SHARE.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\Output\SHARE.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Mon Aug 26 12:18:41 2019
<BR><P>
<H3>Maximum Stack Usage =       1628 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
PPS_TASK &rArr; cocoguojia_sdWrireGpsRtk &rArr; cocoguojia_WriteFileSystem &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[29d]">disk_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29d]">disk_write</a><BR>
 <LI><a href="#[29c]">disk_read</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29c]">disk_read</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">APP_TASKCREATE</a> from main.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[9c]">AppFuncCmd_GetTextInputBoxParam</a> from psdk_app_func.o(.text) referenced from psdk_app_func.o(.constdata)
 <LI><a href="#[99]">AppFuncCmd_GetWidgetGroupCount</a> from psdk_app_func.o(.text) referenced from psdk_app_func.o(.constdata)
 <LI><a href="#[9a]">AppFuncCmd_GetWidgetGroupValue</a> from psdk_app_func.o(.text) referenced from psdk_app_func.o(.constdata)
 <LI><a href="#[97]">AppFuncCmd_GetWidgetListLength</a> from psdk_app_func.o(.text) referenced from psdk_app_func.o(.constdata)
 <LI><a href="#[98]">AppFuncCmd_GetWidgetListValue</a> from psdk_app_func.o(.text) referenced from psdk_app_func.o(.constdata)
 <LI><a href="#[9b]">AppFuncCmd_SetWidgetValue</a> from psdk_app_func.o(.text) referenced from psdk_app_func.o(.constdata)
 <LI><a href="#[96]">AppFuncCmd_TT_AppToLoad</a> from psdk_app_func.o(.text) referenced from psdk_app_func.o(.constdata)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">CAM_TASK</a> from cam_task.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[73]">CamEmu_FormatSdcard</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[6b]">CamEmu_GetCameraMode</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[7d]">CamEmu_GetFocusAssistantSettings</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[79]">CamEmu_GetFocusMode</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[80]">CamEmu_GetFocusRingValue</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[7e]">CamEmu_GetFocusRingValueUpperBound</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[7b]">CamEmu_GetFocusZone</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[75]">CamEmu_GetMeteringMode</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[84]">CamEmu_GetOpticalZoomFactor</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[83]">CamEmu_GetOpticalZoomFocalLength</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[81]">CamEmu_GetOpticalZoomSpec</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[6f]">CamEmu_GetPhotographyMode</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[6d]">CamEmu_GetPhotographyState</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[71]">CamEmu_GetRecordingState</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[72]">CamEmu_GetSdcardParam</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[77]">CamEmu_GetSpotMetering</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[6c]">CamEmu_Photography</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[6a]">CamEmu_SetCameraMode</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[7c]">CamEmu_SetFocusAssistantSettings</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[78]">CamEmu_SetFocusMode</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[7f]">CamEmu_SetFocusRingValue</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[7a]">CamEmu_SetFocusZone</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[74]">CamEmu_SetMeteringMode</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[82]">CamEmu_SetOpticalZoomFocalLength</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[6e]">CamEmu_SetPhotographyMode</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[70]">CamEmu_SetRecording</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[76]">CamEmu_SetSpotMetering</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[85]">CamEmu_StartContinuousOpticalZoom</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[86]">CamEmu_StopContinuousOpticalZoom</a> from test_payload_cam_emu.o(.text) referenced from test_payload_cam_emu.o(.constdata)
 <LI><a href="#[56]">Cam_status_update_TASK</a> from cam_status_task.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[b3]">CameraCmd_FormatSDCard</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[c3]">CameraCmd_GetDigitalZoomFactor</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[c1]">CameraCmd_GetDigitalZoomSpec</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[bd]">CameraCmd_GetFocusAssistantSettings</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[b9]">CameraCmd_GetFocusMode</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[c0]">CameraCmd_GetFocusRingValue</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[be]">CameraCmd_GetFocusRingValueUpperBound</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[bb]">CameraCmd_GetFocusZone</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[b5]">CameraCmd_GetMeteringMode</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[ab]">CameraCmd_GetMode</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[c7]">CameraCmd_GetOpticalZoomFactor</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[c6]">CameraCmd_GetOpticalZoomFocalLength</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[c4]">CameraCmd_GetOpticalZoomSpec</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[b1]">CameraCmd_GetRecordVideoState</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[b2]">CameraCmd_GetSDCardState</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[af]">CameraCmd_GetShootPhotoMode</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[ad]">CameraCmd_GetShootPhotoState</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[b7]">CameraCmd_GetSpotMetering</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[b0]">CameraCmd_RecordVideo</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[c2]">CameraCmd_SetDigitalZoomFactor</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[bc]">CameraCmd_SetFocusAssistantSettings</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[b8]">CameraCmd_SetFocusMode</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[bf]">CameraCmd_SetFocusRingValue</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[ba]">CameraCmd_SetFocusZone</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[b4]">CameraCmd_SetMeteringMode</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[aa]">CameraCmd_SetMode</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[c5]">CameraCmd_SetOpticalZoomFocalLength</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[ae]">CameraCmd_SetShootPhotoMode</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[b6]">CameraCmd_SetSpotMetering</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[ac]">CameraCmd_ShootPhoto</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[c8]">CameraCmd_StartContinuousOpticalZoom</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[c9]">CameraCmd_StopContinuousOpticalZoom</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[a9]">CameraCmd_SupportState</a> from psdk_payload_camera.o(.text) referenced from psdk_payload_camera.o(.constdata)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from hotshoe.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from pps.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[58]">FAN_TASK</a> from fan_task.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ce]">GimbalCmd_ControlAngle</a> from psdk_payload_gimbal.o(.text) referenced from psdk_payload_gimbal.o(.constdata)
 <LI><a href="#[cf]">GimbalCmd_ControlJointAngle</a> from psdk_payload_gimbal.o(.text) referenced from psdk_payload_gimbal.o(.constdata)
 <LI><a href="#[cd]">GimbalCmd_ControlSpeed</a> from psdk_payload_gimbal.o(.text) referenced from psdk_payload_gimbal.o(.constdata)
 <LI><a href="#[d1]">GimbalCmd_GetCaliProgress</a> from psdk_payload_gimbal.o(.text) referenced from psdk_payload_gimbal.o(.constdata)
 <LI><a href="#[ca]">GimbalCmd_GetGimbalState</a> from psdk_payload_gimbal.o(.text) referenced from psdk_payload_gimbal.o(.constdata)
 <LI><a href="#[cc]">GimbalCmd_ReturnHead</a> from psdk_payload_gimbal.o(.text) referenced from psdk_payload_gimbal.o(.constdata)
 <LI><a href="#[cb]">GimbalCmd_SetGimbalMode</a> from psdk_payload_gimbal.o(.text) referenced from psdk_payload_gimbal.o(.constdata)
 <LI><a href="#[d0]">GimbalCmd_StartCalibration</a> from psdk_payload_gimbal.o(.text) referenced from psdk_payload_gimbal.o(.constdata)
 <LI><a href="#[d2]">GimbalCmd_SupportState</a> from psdk_payload_gimbal.o(.text) referenced from psdk_payload_gimbal.o(.constdata)
 <LI><a href="#[8b]">GimbalEmu_ControlAngle</a> from test_payload_gimbal_emu.o(.text) referenced from test_payload_gimbal_emu.o(.constdata)
 <LI><a href="#[8c]">GimbalEmu_ControlJointAngle</a> from test_payload_gimbal_emu.o(.text) referenced from test_payload_gimbal_emu.o(.constdata)
 <LI><a href="#[8a]">GimbalEmu_ControlSpeed</a> from test_payload_gimbal_emu.o(.text) referenced from test_payload_gimbal_emu.o(.constdata)
 <LI><a href="#[8e]">GimbalEmu_GetCalibrationProgress</a> from test_payload_gimbal_emu.o(.text) referenced from test_payload_gimbal_emu.o(.constdata)
 <LI><a href="#[87]">GimbalEmu_GetGimbalParam</a> from test_payload_gimbal_emu.o(.text) referenced from test_payload_gimbal_emu.o(.constdata)
 <LI><a href="#[89]">GimbalEmu_ReturnHead</a> from test_payload_gimbal_emu.o(.text) referenced from test_payload_gimbal_emu.o(.constdata)
 <LI><a href="#[88]">GimbalEmu_SetGimbalMode</a> from test_payload_gimbal_emu.o(.text) referenced from test_payload_gimbal_emu.o(.constdata)
 <LI><a href="#[8d]">GimbalEmu_StartCalibration</a> from test_payload_gimbal_emu.o(.text) referenced from test_payload_gimbal_emu.o(.constdata)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">KEY_TASK</a> from key_task.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a4]">MsgPushCmd_GpsRawData</a> from psdk_msg_subcribe.o(.text) referenced from psdk_msg_subcribe.o(.constdata)
 <LI><a href="#[a8]">MsgPushCmd_OtherPayloadFocalLength</a> from psdk_msg_subcribe.o(.text) referenced from psdk_msg_subcribe.o(.constdata)
 <LI><a href="#[a7]">MsgPushCmd_OtherPayloadType</a> from psdk_msg_subcribe.o(.text) referenced from psdk_msg_subcribe.o(.constdata)
 <LI><a href="#[a2]">MsgPushCmd_PushAppDateTime</a> from psdk_msg_subcribe.o(.text) referenced from psdk_msg_subcribe.o(.constdata)
 <LI><a href="#[9e]">MsgPushCmd_PushAttitude</a> from psdk_msg_subcribe.o(.text) referenced from psdk_msg_subcribe.o(.constdata)
 <LI><a href="#[9d]">MsgPushCmd_PushBandWidth</a> from psdk_msg_subcribe.o(.text) referenced from psdk_msg_subcribe.o(.constdata)
 <LI><a href="#[a3]">MsgPushCmd_PushBaroHeight</a> from psdk_msg_subcribe.o(.text) referenced from psdk_msg_subcribe.o(.constdata)
 <LI><a href="#[9f]">MsgPushCmd_PushBatteryInfo</a> from psdk_msg_subcribe.o(.text) referenced from psdk_msg_subcribe.o(.constdata)
 <LI><a href="#[a0]">MsgPushCmd_PushGpsInfo</a> from psdk_msg_subcribe.o(.text) referenced from psdk_msg_subcribe.o(.constdata)
 <LI><a href="#[a1]">MsgPushCmd_PushUavState</a> from psdk_msg_subcribe.o(.text) referenced from psdk_msg_subcribe.o(.constdata)
 <LI><a href="#[a5]">MsgPushCmd_RtkRawData</a> from psdk_msg_subcribe.o(.text) referenced from psdk_msg_subcribe.o(.constdata)
 <LI><a href="#[a6]">MsgPushCmd_UtcTimestamp</a> from psdk_msg_subcribe.o(.text) referenced from psdk_msg_subcribe.o(.constdata)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">OLED_TASK</a> from oled_task.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[d3]">OsdkFuncCmd_TT_OsdkToLoad</a> from psdk_osdk_func.o(.text) referenced from psdk_osdk_func.o(.constdata)
 <LI><a href="#[5d]">PPS_TASK</a> from application.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5b]">ProcessPsdkRecTask</a> from application.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[95]">PsdkPayloadStateCmd_GetPayloadProductAlias</a> from psdk_upper.o(.text) referenced from psdk_upper.o(.constdata)
 <LI><a href="#[93]">PsdkPayloadStateCmd_GetPayloadProductInfo</a> from psdk_upper.o(.text) referenced from psdk_upper.o(.constdata)
 <LI><a href="#[94]">PsdkPayloadStateCmd_GetSkyportVersionInfo</a> from psdk_upper.o(.text) referenced from psdk_upper.o(.constdata)
 <LI><a href="#[91]">PsdkPayloadStateCmd_GetVersion</a> from psdk_upper.o(.text) referenced from psdk_upper.o(.constdata)
 <LI><a href="#[90]">PsdkPayloadStateCmd_IdentityVerify</a> from psdk_upper.o(.text) referenced from psdk_upper.o(.constdata)
 <LI><a href="#[92]">PsdkPayloadStateCmd_LinkHandShake</a> from psdk_upper.o(.text) referenced from psdk_upper.o(.constdata)
 <LI><a href="#[5c]">PsdkTestTask</a> from application.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[dc]">Psdk_Write</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">RGB_TASK</a> from rgb_task.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">RUNINIT_TASK</a> from runinit_task.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from cocoguojia_sdio.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5a]">SJ_TASK</a> from app_updata_task.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[59]">TEMP_TASK</a> from temp_task.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">TRIGGER_TASK</a> from trigger_task.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[4a]">Test_GetWidgetValueFunc</a> from test_app_func.o(.text) referenced from application.o(.text)
 <LI><a href="#[49]">Test_ReceiveFromMobileSDKFunc</a> from test_app_func.o(.text) referenced from application.o(.text)
 <LI><a href="#[8f]">Test_ReceiveFromOnboardSDKFunc</a> from test_osdk_func.o(.text) referenced from test_osdk_func.o(.constdata)
 <LI><a href="#[4b]">Test_SetWidgetValueFunc</a> from test_app_func.o(.text) referenced from application.o(.text)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from cocoguojia_usart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from cocoguojia_usart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from cocoguojia_usart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[4f]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[4e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[63]">appDateTimeMsgCallback</a> from test_msg_push.o(.text) referenced from test_msg_push.o(.constdata)
 <LI><a href="#[5e]">bandWidthMsgCallback</a> from test_msg_push.o(.text) referenced from test_msg_push.o(.constdata)
 <LI><a href="#[64]">baroHeightDataMsgCallback</a> from test_msg_push.o(.text) referenced from test_msg_push.o(.constdata)
 <LI><a href="#[60]">batteryInfoMsgCallback</a> from test_msg_push.o(.text) referenced from test_msg_push.o(.constdata)
 <LI><a href="#[61]">gpsInfoMsgCallback</a> from test_msg_push.o(.text) referenced from test_msg_push.o(.constdata)
 <LI><a href="#[65]">gpsRawDataMsgCallback</a> from test_msg_push.o(.text) referenced from test_msg_push.o(.constdata)
 <LI><a href="#[46]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[69]">otherPayloadFocalLengthMsgCallback</a> from test_msg_push.o(.text) referenced from test_msg_push.o(.constdata)
 <LI><a href="#[68]">otherPayloadTypeMsgCallback</a> from test_msg_push.o(.text) referenced from test_msg_push.o(.constdata)
 <LI><a href="#[4c]">prvIdleTask</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[4d]">prvTaskExitError</a> from port.o(.text) referenced from port.o(.text)
 <LI><a href="#[66]">rtkRawDataMsgCallback</a> from test_msg_push.o(.text) referenced from test_msg_push.o(.constdata)
 <LI><a href="#[5f]">uavAttitudeMsgCallback</a> from test_msg_push.o(.text) referenced from test_msg_push.o(.constdata)
 <LI><a href="#[62]">uavStateMsgCallback</a> from test_msg_push.o(.text) referenced from test_msg_push.o(.constdata)
 <LI><a href="#[67]">utcTimestampMsgCallback</a> from test_msg_push.o(.text) referenced from test_msg_push.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[2e7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[d4]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2dd]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2e8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2e9]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2ea]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2eb]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2ec]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[281]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[282]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>Psdk_Write</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Psdk_Write &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>Psdk_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Psdk_Read &rArr; UART_Read &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPsdkRecTask
</UL>

<P><STRONG><a name="[5c]"></a>PsdkTestTask</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = PsdkTestTask &rArr; PsdkOsdkFunc_TransferToOsdk &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkOsdkFunc_TransferToOsdk
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_TransferToApp
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_PushMsgToFloatingWindow
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>ProcessPsdkRecTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = ProcessPsdkRecTask &rArr; PsdkUpper_ProcessReceiveData &rArr; PsdkProto_ProcessReceiveData &rArr; PsdkProto_DealFrame &rArr; PsdkProto_DealCmd &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkUpper_ProcessReceiveData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Psdk_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>application_init</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = application_init &rArr; PsdkUpper_Init &rArr; PsdkProto_Init &rArr; PsdkSys_SemaphoreTimedWait &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkUpper_SetFixVersion
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkUpper_RegSendFunction
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkUpper_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkOsdkFunc_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkMsgSub_RegMsgCallbackList
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkMsgSub_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkGimbal_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkCamera_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_SetWidgetList
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_SetReceiveFromAppCallback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_RegSetWidgetValueCallback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_RegGetWidgetValueCallback
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPS_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HotShoe_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillInUserInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>UTC_to_BJtime</STRONG> (Thumb, 230 bytes, Stack size 20 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UTC_to_BJtime
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPS_TASK
</UL>

<P><STRONG><a name="[5d]"></a>PPS_TASK</STRONG> (Thumb, 724 bytes, Stack size 72 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1628<LI>Call Chain = PPS_TASK &rArr; cocoguojia_sdWrireGpsRtk &rArr; cocoguojia_WriteFileSystem &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_sdWrireGpsRtk
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RequestPosition
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HotShoe_isTriggered
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTC_to_BJtime
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[26a]"></a>vApplicationTickHook</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, application.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[100]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = vApplicationStackOverflowHook &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = main &rArr; application_init &rArr; PsdkUpper_Init &rArr; PsdkProto_Init &rArr; PsdkSys_SemaphoreTimedWait &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[50]"></a>APP_TASKCREATE</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = APP_TASKCREATE &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>Test_ReceiveFromMobileSDKFunc</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, test_app_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Test_ReceiveFromMobileSDKFunc &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>Test_GetWidgetValueFunc</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, test_app_func.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>Test_SetWidgetValueFunc</STRONG> (Thumb, 452 bytes, Stack size 16 bytes, test_app_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = Test_SetWidgetValueFunc &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[10d]"></a>Test_GetTextInputBoxParamFunc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, test_app_func.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[6a]"></a>CamEmu_SetCameraMode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, test_payload_cam_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CamEmu_SetCameraMode &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>CamEmu_GetCameraMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, test_payload_cam_emu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>CamEmu_Photography</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, test_payload_cam_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CamEmu_Photography &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>CamEmu_GetPhotographyState</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, test_payload_cam_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CamEmu_GetPhotographyState &rArr; osKernelSysTick &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>CamEmu_SetPhotographyMode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, test_payload_cam_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CamEmu_SetPhotographyMode &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>CamEmu_GetPhotographyMode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, test_payload_cam_emu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>CamEmu_SetRecording</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, test_payload_cam_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CamEmu_SetRecording &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>CamEmu_GetRecordingState</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, test_payload_cam_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CamEmu_GetRecordingState &rArr; osKernelSysTick &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>CamEmu_GetSdcardParam</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, test_payload_cam_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CamEmu_GetSdcardParam &rArr; osKernelSysTick &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>CamEmu_FormatSdcard</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, test_payload_cam_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = CamEmu_FormatSdcard &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>CamEmu_SetMeteringMode</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, test_payload_cam_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CamEmu_SetMeteringMode &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>CamEmu_GetMeteringMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, test_payload_cam_emu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>CamEmu_SetSpotMetering</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, test_payload_cam_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CamEmu_SetSpotMetering &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>CamEmu_GetSpotMetering</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, test_payload_cam_emu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>CamEmu_SetFocusMode</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, test_payload_cam_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CamEmu_SetFocusMode &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>CamEmu_GetFocusMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, test_payload_cam_emu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>CamEmu_SetFocusZone</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, test_payload_cam_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CamEmu_SetFocusZone &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>CamEmu_GetFocusZone</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, test_payload_cam_emu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>CamEmu_SetFocusAssistantSettings</STRONG> (Thumb, 440 bytes, Stack size 16 bytes, test_payload_cam_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CamEmu_SetFocusAssistantSettings &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>CamEmu_GetFocusAssistantSettings</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, test_payload_cam_emu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>CamEmu_GetFocusRingValueUpperBound</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, test_payload_cam_emu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>CamEmu_SetFocusRingValue</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, test_payload_cam_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CamEmu_SetFocusRingValue &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>CamEmu_GetFocusRingValue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, test_payload_cam_emu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[2ed]"></a>CamEmu_GetDigitalZoomSpec</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, test_payload_cam_emu.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>CamEmu_SetDigitalZoomFactor</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, test_payload_cam_emu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>

<P><STRONG><a name="[2ee]"></a>CamEmu_GetDigitalZoomFactor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, test_payload_cam_emu.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>CamEmu_GetOpticalZoomSpec</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, test_payload_cam_emu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>CamEmu_SetOpticalZoomFocalLength</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, test_payload_cam_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CamEmu_SetOpticalZoomFocalLength &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>CamEmu_GetOpticalZoomFocalLength</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, test_payload_cam_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CamEmu_GetOpticalZoomFocalLength
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>CamEmu_GetOpticalZoomFactor</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, test_payload_cam_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CamEmu_GetOpticalZoomFactor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>CamEmu_StartContinuousOpticalZoom</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, test_payload_cam_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CamEmu_StartContinuousOpticalZoom &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>CamEmu_StopContinuousOpticalZoom</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, test_payload_cam_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = CamEmu_StopContinuousOpticalZoom &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_cam_emu.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>GimbalEmu_GetGimbalParam</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, test_payload_gimbal_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GimbalEmu_GetGimbalParam &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_gimbal_emu.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>GimbalEmu_SetGimbalMode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, test_payload_gimbal_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = GimbalEmu_SetGimbalMode &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_gimbal_emu.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>GimbalEmu_ReturnHead</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, test_payload_gimbal_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = GimbalEmu_ReturnHead &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_gimbal_emu.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>GimbalEmu_ControlSpeed</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, test_payload_gimbal_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = GimbalEmu_ControlSpeed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_gimbal_emu.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>GimbalEmu_ControlAngle</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, test_payload_gimbal_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = GimbalEmu_ControlAngle &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_gimbal_emu.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>GimbalEmu_ControlJointAngle</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, test_payload_gimbal_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = GimbalEmu_ControlJointAngle &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_gimbal_emu.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>GimbalEmu_StartCalibration</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, test_payload_gimbal_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = GimbalEmu_StartCalibration &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_gimbal_emu.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>GimbalEmu_GetCalibrationProgress</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, test_payload_gimbal_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = GimbalEmu_GetCalibrationProgress &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_gimbal_emu.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>Test_VerifyUtcTimestamp</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, test_positioning.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utcTimestampMsgCallback
</UL>

<P><STRONG><a name="[111]"></a>Test_SyncTime</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, test_positioning.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Test_SyncTime
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utcTimestampMsgCallback
</UL>

<P><STRONG><a name="[fa]"></a>Test_RequestPosition</STRONG> (Thumb, 536 bytes, Stack size 392 bytes, test_positioning.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = Test_RequestPosition &rArr; PsdkPositioning_GetPos &rArr; PsdkProto_SendGetAck &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPositioning_GetPos
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_TransferTimeFromLocalToUtc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPS_TASK
</UL>

<P><STRONG><a name="[101]"></a>Sys_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ef]"></a>cocoguojia_exitInterruptDisable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pps.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>cocoguojia_exitInterruptEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pps.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>PPS_Init</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, pps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PPS_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[2f1]"></a>PPS_isTriggered</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pps.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>PPS_GetNewestTriggerTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utcTimestampMsgCallback
</UL>

<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, pps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTI3_IRQHandler &rArr; osKernelSysTick &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>HotShoe_Init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, hotshoe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HotShoe_Init &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[fc]"></a>HotShoe_isTriggered</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hotshoe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HotShoe_isTriggered &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPS_TASK
</UL>

<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hotshoe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EXTI1_IRQHandler &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>BSP_Init</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BSP_Init &rArr; cocoguojia_libInit &rArr; cocoguojia_tim1Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_libInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>CAM_TASK</STRONG> (Thumb, 924 bytes, Stack size 8 bytes, cam_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CAM_TASK &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>KEY_TASK</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, key_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = KEY_TASK &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayUntil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>OLED_TASK</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, oled_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OLED_TASK &rArr; osMessageGet &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowSystemInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowShuting
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowShutWrong
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowShareuavLogoAndID
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowSetModel2
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowSetModel1
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowRepairModel
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowOpening
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowOpenWrong
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowLoseWrong
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledRunShowFor2
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledRunShowFor1
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>RGB_TASK</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, rgb_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RGB_TASK &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>RUNINIT_TASK</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, runinit_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1532<LI>Call Chain = RUNINIT_TASK &rArr; write_system_version_number &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_version_number
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpAndShowLogo
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEepromAndShowResultAndSetDoWhit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>TRIGGER_TASK</STRONG> (Thumb, 580 bytes, Stack size 8 bytes, trigger_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = TRIGGER_TASK &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_ds18b20GetTemp
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>FAN_TASK</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, fan_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = FAN_TASK &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>SJ_TASK</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, app_updata_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1500<LI>Call Chain = SJ_TASK &rArr; read_bin &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>TEMP_TASK</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, temp_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TEMP_TASK &rArr; cocoguojia_ds18b20GetTemp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_ds18b20GetTemp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>Cam_status_update_TASK</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, cam_status_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Cam_status_update_TASK &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>i2c_Start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cocoguojia_24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_eeWriteBytes
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_eeReadBytes
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>

<P><STRONG><a name="[149]"></a>i2c_Stop</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cocoguojia_24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_eeWriteBytes
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_eeReadBytes
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_eeCheckOk
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>

<P><STRONG><a name="[14a]"></a>i2c_SendByte</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, cocoguojia_24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_eeWriteBytes
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_eeReadBytes
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>

<P><STRONG><a name="[14b]"></a>i2c_ReadByte</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, cocoguojia_24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_eeReadBytes
</UL>

<P><STRONG><a name="[14c]"></a>i2c_WaitAck</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cocoguojia_24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_eeWriteBytes
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_eeReadBytes
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>

<P><STRONG><a name="[14d]"></a>i2c_Ack</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, cocoguojia_24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_eeReadBytes
</UL>

<P><STRONG><a name="[14e]"></a>i2c_NAck</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cocoguojia_24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_eeReadBytes
</UL>

<P><STRONG><a name="[14f]"></a>i2c_CheckDevice</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cocoguojia_24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = i2c_CheckDevice &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_eeCheckOk
</UL>

<P><STRONG><a name="[150]"></a>cocoguojia_eeCheckOk</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cocoguojia_24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cocoguojia_eeCheckOk &rArr; i2c_CheckDevice &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_libInit
</UL>

<P><STRONG><a name="[151]"></a>cocoguojia_eeReadBytes</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, cocoguojia_24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cocoguojia_eeReadBytes &rArr; i2c_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_readSetParameter
</UL>

<P><STRONG><a name="[152]"></a>cocoguojia_eeWriteBytes</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, cocoguojia_24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cocoguojia_eeWriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_eeErase
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_writeSetParameter
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_readSetParameter
</UL>

<P><STRONG><a name="[153]"></a>cocoguojia_eeErase</STRONG> (Thumb, 36 bytes, Stack size 264 bytes, cocoguojia_24c02.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_eeWriteBytes
</UL>

<P><STRONG><a name="[140]"></a>cocoguojia_readSetParameter</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cocoguojia_24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cocoguojia_readSetParameter &rArr; cocoguojia_eeWriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_eeWriteBytes
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_eeReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEepromAndShowResultAndSetDoWhit
</UL>

<P><STRONG><a name="[141]"></a>cocoguojia_writeSetParameter</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cocoguojia_24c02.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cocoguojia_writeSetParameter &rArr; cocoguojia_eeWriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_eeWriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEepromAndShowResultAndSetDoWhit
</UL>

<P><STRONG><a name="[159]"></a>cocoguojia_ds18b20Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cocoguojia_ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cocoguojia_ds18b20Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_libInit
</UL>

<P><STRONG><a name="[144]"></a>cocoguojia_ds18b20GetTemp</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, cocoguojia_ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cocoguojia_ds18b20GetTemp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Byte
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRIGGER_TASK
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_TASK
</UL>

<P><STRONG><a name="[12c]"></a>cocoguojia_libInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cocoguojia_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = cocoguojia_libInit &rArr; cocoguojia_tim1Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_tim1Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_sdDeInit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_rgbledInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledInit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_ds18b20Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_eeCheckOk
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[2f2]"></a>cocoguojia_systemSoftReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cocoguojia_init.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>OLED_WR_Byte</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese2FanBai
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese2
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_Off
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCharFanBai
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[167]"></a>OLED_Set_Pos</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese2FanBai
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese2
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCharFanBai
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledInit
</UL>

<P><STRONG><a name="[168]"></a>OLED_Display_On</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cocoguojia_oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[169]"></a>OLED_Display_Off</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cocoguojia_oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[131]"></a>OLED_Clear</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_Clear &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_TASK
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledInit
</UL>

<P><STRONG><a name="[16a]"></a>OLED_ShowChar</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowShutWrong
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowRepairModel
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowOpenWrong
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowLoseWrong
</UL>

<P><STRONG><a name="[16c]"></a>oled_pow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>

<P><STRONG><a name="[16b]"></a>OLED_ShowNum</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_pow
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowShareuavLogoAndID
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledRunShowFor2
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledRunShowFor1
</UL>

<P><STRONG><a name="[16d]"></a>OLED_ShowString</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowSystemInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowShuting
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowShutWrong
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowShareuavLogoAndID
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowSetModel1
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowRepairModel
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowOpening
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowOpenWrong
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowLoseWrong
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledRunShowFor2
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledRunShowFor1
</UL>

<P><STRONG><a name="[16e]"></a>OLED_ShowStringFanBai</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_ShowStringFanBai &rArr; OLED_ShowCharFanBai &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCharFanBai
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowSetModel2
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowSetModel1
</UL>

<P><STRONG><a name="[170]"></a>OLED_ShowCHinese</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_ShowCHinese &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowShareuavLogoAndID
</UL>

<P><STRONG><a name="[171]"></a>OLED_ShowCHinese2</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_ShowCHinese2 &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowSystemInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowShuting
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowShutWrong
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowSetModel2
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowSetModel1
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowRepairModel
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowOpening
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowOpenWrong
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowLoseWrong
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledRunShowFor1
</UL>

<P><STRONG><a name="[172]"></a>OLED_ShowCHinese2FanBai</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_ShowCHinese2FanBai &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowSetModel1
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowRepairModel
</UL>

<P><STRONG><a name="[173]"></a>OLED_DrawBMP</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_DrawBMP &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledShowShareuavLogoAndID
</UL>

<P><STRONG><a name="[162]"></a>cocoguojia_oledInit</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cocoguojia_oledInit &rArr; OLED_Clear &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_oled
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_libInit
</UL>

<P><STRONG><a name="[133]"></a>cocoguojia_oledShowShareuavLogoAndID</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cocoguojia_oledShowShareuavLogoAndID &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_TASK
</UL>

<P><STRONG><a name="[137]"></a>cocoguojia_oledShowSystemInit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cocoguojia_oledShowSystemInit &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese2
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_TASK
</UL>

<P><STRONG><a name="[138]"></a>cocoguojia_oledShowShuting</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cocoguojia_oledShowShuting &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese2
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_TASK
</UL>

<P><STRONG><a name="[139]"></a>cocoguojia_oledShowOpening</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cocoguojia_oledShowOpening &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese2
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_TASK
</UL>

<P><STRONG><a name="[135]"></a>cocoguojia_oledRunShowFor1</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cocoguojia_oledRunShowFor1 &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese2
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_TASK
</UL>

<P><STRONG><a name="[134]"></a>cocoguojia_oledRunShowFor2</STRONG> (Thumb, 520 bytes, Stack size 24 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cocoguojia_oledRunShowFor2 &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_TASK
</UL>

<P><STRONG><a name="[13a]"></a>cocoguojia_oledShowShutWrong</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cocoguojia_oledShowShutWrong &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese2
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_TASK
</UL>

<P><STRONG><a name="[13b]"></a>cocoguojia_oledShowOpenWrong</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cocoguojia_oledShowOpenWrong &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese2
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_TASK
</UL>

<P><STRONG><a name="[13c]"></a>cocoguojia_oledShowLoseWrong</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cocoguojia_oledShowLoseWrong &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese2
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_TASK
</UL>

<P><STRONG><a name="[13d]"></a>cocoguojia_oledShowSetModel1</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cocoguojia_oledShowSetModel1 &rArr; OLED_ShowStringFanBai &rArr; OLED_ShowCharFanBai &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese2FanBai
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese2
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStringFanBai
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_TASK
</UL>

<P><STRONG><a name="[13e]"></a>cocoguojia_oledShowSetModel2</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cocoguojia_oledShowSetModel2 &rArr; OLED_ShowStringFanBai &rArr; OLED_ShowCharFanBai &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese2
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStringFanBai
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_TASK
</UL>

<P><STRONG><a name="[136]"></a>cocoguojia_oledShowRepairModel</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cocoguojia_oledShowRepairModel &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese2FanBai
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese2
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_TASK
</UL>

<P><STRONG><a name="[161]"></a>cocoguojia_rgbledInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cocoguojia_rgbled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cocoguojia_rgbledInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_libInit
</UL>

<P><STRONG><a name="[163]"></a>cocoguojia_tim1Init</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, cocoguojia_tim1pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = cocoguojia_tim1Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_libInit
</UL>

<P><STRONG><a name="[17b]"></a>cocoguojia_tim1Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cocoguojia_tim1pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>

<P><STRONG><a name="[17c]"></a>cocoguojia_tim1Disable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cocoguojia_tim1pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>

<P><STRONG><a name="[e9]"></a>UART_Init</STRONG> (Thumb, 582 bytes, Stack size 56 bytes, cocoguojia_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = UART_Init &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[df]"></a>UART_Read</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, cocoguojia_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART_Read &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Psdk_Read
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_usartReadDataForlen
</UL>

<P><STRONG><a name="[dd]"></a>UART_Write</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, cocoguojia_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Psdk_Write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_usartSendStr
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_usartSendChar
</UL>

<P><STRONG><a name="[187]"></a>cocoguojia_usartSendChar</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, cocoguojia_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
</UL>

<P><STRONG><a name="[188]"></a>cocoguojia_usartSendStr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cocoguojia_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[189]"></a>cocoguojia_usartReadDataForlen</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cocoguojia_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Read
</UL>

<P><STRONG><a name="[e8]"></a>LOG_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cocoguojia_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LOG_Init &rArr; UART_Init &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[db]"></a>UART_Printf</STRONG> (Thumb, 50 bytes, Stack size 280 bytes, cocoguojia_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_StopContinuousOpticalZoom
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_StartContinuousOpticalZoom
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_SetOpticalZoomFocalLength
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_SetDigitalZoomFactor
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_SetFocusRingValue
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_SetFocusAssistantSettings
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_SetFocusZone
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_SetFocusMode
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_SetSpotMetering
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_SetMeteringMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_FormatSdcard
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_SetRecording
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_SetPhotographyMode
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_Photography
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_SetCameraMode
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utcTimestampMsgCallback
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRIGGER_TASK
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAN_TASK
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TASKCREATE
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_SetWidgetValueFunc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RequestPosition
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ReceiveFromMobileSDKFunc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillInUserInfo
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFuncCmd_SetWidgetValue
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFuncCmd_GetWidgetGroupValue
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_ProcessReceiveData
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_TransferTimeFromLocalToUtc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ReceiveFromOnboardSDKFunc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalEmu_GetCalibrationProgress
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalEmu_StartCalibration
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalEmu_ControlJointAngle
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalEmu_ControlAngle
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalEmu_ControlSpeed
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalEmu_ReturnHead
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalEmu_SetGimbalMode
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_DealCmd
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkDebug_AssertFailed
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, cocoguojia_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Put
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, cocoguojia_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART2_IRQHandler &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Put
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, cocoguojia_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART3_IRQHandler &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Put
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17d]"></a>RingBuf_Init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cocoguojia_usart_ringbuffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[186]"></a>RingBuf_Put</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cocoguojia_usart_ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[184]"></a>RingBuf_Get</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, cocoguojia_usart_ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RingBuf_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Read
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2f3]"></a>RingBuf_GetUnusedSize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cocoguojia_usart_ringbuffer.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>cocoguojia_SdioFlash_ms</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cocoguojia_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cocoguojia_SdioFlash_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_sdWrireGpsRtk
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_RegisteredWorkspace
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_WriteFileSystem
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bin
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_version_number
</UL>

<P><STRONG><a name="[190]"></a>cocoguojia_CancleWorkspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cocoguojia_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = cocoguojia_CancleWorkspace &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_sdWrireGpsRtk
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bin
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_version_number
</UL>

<P><STRONG><a name="[192]"></a>cocoguojia_WriteFileSystem</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, cocoguojia_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1532<LI>Call Chain = cocoguojia_WriteFileSystem &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_SdioFlash_ms
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_sdWrireGpsRtk
</UL>

<P><STRONG><a name="[19c]"></a>cocoguojia_RegisteredWorkspace</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, cocoguojia_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = cocoguojia_RegisteredWorkspace &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_SdioFlash_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_sdWrireGpsRtk
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bin
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_version_number
</UL>

<P><STRONG><a name="[ff]"></a>cocoguojia_sdWrireGpsRtk</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, cocoguojia_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1556<LI>Call Chain = cocoguojia_sdWrireGpsRtk &rArr; cocoguojia_WriteFileSystem &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_RegisteredWorkspace
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_WriteFileSystem
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_CancleWorkspace
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_SdioFlash_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPS_TASK
</UL>

<P><STRONG><a name="[143]"></a>write_system_version_number</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, cocoguojia_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1532<LI>Call Chain = write_system_version_number &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_RegisteredWorkspace
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_CancleWorkspace
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_SdioFlash_ms
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUNINIT_TASK
</UL>

<P><STRONG><a name="[145]"></a>read_bin</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, cocoguojia_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1500<LI>Call Chain = read_bin &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_RegisteredWorkspace
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_CancleWorkspace
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_SdioFlash_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SJ_TASK
</UL>

<P><STRONG><a name="[1a3]"></a>SdioDelayInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_sdDeInit
</UL>

<P><STRONG><a name="[164]"></a>cocoguojia_sdDeInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cocoguojia_sdDeInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioDelayInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_libInit
</UL>

<P><STRONG><a name="[1b2]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1b4]"></a>SD_SelectDeselect</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_SelectDeselect &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1bb]"></a>SD_GetCardInfo</STRONG> (Thumb, 640 bytes, Stack size 28 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1b6]"></a>SD_InitializeCards</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1b9]"></a>SD_PowerON</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SD_PowerON &rArr; SDIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1ba]"></a>SD_Init</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[1bc]"></a>SD_SendStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_SendStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[1bd]"></a>SD_GetState</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_GetState &rArr; SD_SendStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>

<P><STRONG><a name="[1be]"></a>SD_GetStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_GetStatus &rArr; SD_GetState &rArr; SD_SendStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1bf]"></a>SD_PowerOFF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cocoguojia_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
</UL>

<P><STRONG><a name="[1c0]"></a>SD_SendSDStatus</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, cocoguojia_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardStatus
</UL>

<P><STRONG><a name="[1c1]"></a>SD_GetCardStatus</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, cocoguojia_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
</UL>

<P><STRONG><a name="[1c2]"></a>SD_ReadBlock</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, cocoguojia_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_RxConfig
</UL>

<P><STRONG><a name="[1c5]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SD_ReadMultiBlocks &rArr; SD_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1c6]"></a>SD_WaitReadOperation</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_WaitReadOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAEndOfTransferStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1c8]"></a>SD_WriteBlock</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, cocoguojia_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_TxConfig
</UL>

<P><STRONG><a name="[1c9]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 254 bytes, Stack size 64 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_TxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[1ca]"></a>SD_WaitWriteOperation</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_WaitWriteOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAEndOfTransferStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[2f4]"></a>SD_GetTransferState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cocoguojia_sdio.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>SD_StopTransfer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cocoguojia_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[1ce]"></a>SD_Erase</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, cocoguojia_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
</UL>

<P><STRONG><a name="[1cf]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[2f5]"></a>convert_from_bytes_to_power_of_two</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cocoguojia_sdio.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>PsdkUpper_Init</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, psdk_upper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = PsdkUpper_Init &rArr; PsdkProto_Init &rArr; PsdkSys_SemaphoreTimedWait &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_RegCmdSetHandler
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtoUpper_CalTransferKey
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[f8]"></a>PsdkUpper_SetFixVersion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, psdk_upper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[1db]"></a>PsdkUpper_SetProductAlias</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, psdk_upper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[e6]"></a>PsdkUpper_ProcessReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, psdk_upper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = PsdkUpper_ProcessReceiveData &rArr; PsdkProto_ProcessReceiveData &rArr; PsdkProto_DealFrame &rArr; PsdkProto_DealCmd &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_ProcessReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPsdkRecTask
</UL>

<P><STRONG><a name="[ed]"></a>PsdkUpper_RegSendFunction</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, psdk_upper.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_RegSendDataFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[1de]"></a>PsdkUpper_RegReceiveFunction</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, psdk_upper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_RegReceiveDataFunc
</UL>

<P><STRONG><a name="[ee]"></a>PsdkAppFunc_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, psdk_app_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PsdkAppFunc_Init &rArr; PsdkProto_RegCmdSetHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_RegCmdSetHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[e3]"></a>PsdkAppFunc_TransferToApp</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, psdk_app_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = PsdkAppFunc_TransferToApp &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Send
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProt_GetCurrentSendSeq
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkTestTask
</UL>

<P><STRONG><a name="[e1]"></a>PsdkAppFunc_PushMsgToFloatingWindow</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, psdk_app_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = PsdkAppFunc_PushMsgToFloatingWindow &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Send
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProt_GetCurrentSendSeq
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkTestTask
</UL>

<P><STRONG><a name="[f0]"></a>PsdkAppFunc_SetWidgetList</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, psdk_app_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[ef]"></a>PsdkAppFunc_SetReceiveFromAppCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, psdk_app_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[f1]"></a>PsdkAppFunc_RegGetWidgetValueCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, psdk_app_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[f2]"></a>PsdkAppFunc_RegSetWidgetValueCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, psdk_app_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[2f6]"></a>PsdkAppFunc_RegGetTextInputBoxParamCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, psdk_app_func.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>PsdkMsgSub_Init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, psdk_msg_subcribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PsdkMsgSub_Init &rArr; PsdkProto_RegCmdSetHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_RegCmdSetHandler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[f4]"></a>PsdkMsgSub_RegMsgCallbackList</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, psdk_msg_subcribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PsdkMsgSub_RegMsgCallbackList
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[f5]"></a>PsdkCamera_Init</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PsdkCamera_Init &rArr; PsdkProto_RegCmdSetHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_RegCmdSetHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[f6]"></a>PsdkGimbal_Init</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, psdk_payload_gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PsdkGimbal_Init &rArr; PsdkProto_RegCmdSetHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_RegCmdSetHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[f7]"></a>PsdkOsdkFunc_Init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, psdk_osdk_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PsdkOsdkFunc_Init &rArr; PsdkProto_RegCmdSetHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_RegCmdSetHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[e4]"></a>PsdkOsdkFunc_TransferToOsdk</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, psdk_osdk_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = PsdkOsdkFunc_TransferToOsdk &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Send
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProt_GetCurrentSendSeq
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkTestTask
</UL>

<P><STRONG><a name="[120]"></a>PsdkPositioning_GetPos</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, psdk_positioning.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = PsdkPositioning_GetPos &rArr; PsdkProto_SendGetAck &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProt_GetCurrentSendSeq
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendGetAck
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RequestPosition
</UL>

<P><STRONG><a name="[1ea]"></a>PsdkAes_SetupDecrypt</STRONG> (Thumb, 628 bytes, Stack size 40 bytes, psdk_aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PsdkAes_SetupDecrypt &rArr; PsdkAes_InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_InvMixColumns
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_InvShiftRows
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_InvSubBytes
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_Decrypt
</UL>

<P><STRONG><a name="[1ee]"></a>PsdkAes_Encrypt</STRONG> (Thumb, 94 bytes, Stack size 264 bytes, psdk_aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkDebug_AssertFailed
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SetupEncrypt
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_KeySetup
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_InfoDataToFrame
</UL>

<P><STRONG><a name="[1f0]"></a>PsdkAes_Decrypt</STRONG> (Thumb, 90 bytes, Stack size 264 bytes, psdk_aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = PsdkAes_Decrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkDebug_AssertFailed
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SetupDecrypt
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_KeySetup
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_FrameToInfoData
</UL>

<P><STRONG><a name="[1f1]"></a>PsdkCrc_Crc8</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, psdk_crc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkDebug_AssertFailed
</UL>

<P><STRONG><a name="[1f2]"></a>PsdkCrc_Crc16</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, psdk_crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = PsdkCrc_Crc16 &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkDebug_AssertFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtParse_AddByte
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_InfoDataToFrame
</UL>

<P><STRONG><a name="[1f3]"></a>PsdkCrc_Crc32</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, psdk_crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = PsdkCrc_Crc32 &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkDebug_AssertFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtParse_AddByte
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_InfoDataToFrame
</UL>

<P><STRONG><a name="[1f4]"></a>md5_transform</STRONG> (Thumb, 1992 bytes, Stack size 92 bytes, psdk_md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = md5_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_final
</UL>

<P><STRONG><a name="[1d3]"></a>md5_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, psdk_md5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_IdentityVerify
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtoUpper_CalTransferKey
</UL>

<P><STRONG><a name="[1d4]"></a>md5_update</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, psdk_md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = md5_update &rArr; md5_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_IdentityVerify
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtoUpper_CalTransferKey
</UL>

<P><STRONG><a name="[1d5]"></a>md5_final</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, psdk_md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = md5_final &rArr; md5_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_transform
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_IdentityVerify
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtoUpper_CalTransferKey
</UL>

<P><STRONG><a name="[1e1]"></a>PsdkProto_Send</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, psdk_proto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_MutexUnlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_MutexLock
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_InfoDataToFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkOsdkFunc_TransferToOsdk
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_TransferToApp
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_PushMsgToFloatingWindow
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendGetAck
</UL>

<P><STRONG><a name="[1d8]"></a>PsdkProto_SendAckData</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, psdk_proto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_RecordVideo
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_GetShootPhotoMode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_SetShootPhotoMode
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_GetShootPhotoState
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_ShootPhoto
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_GetMode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_SetMode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgPushCmd_PushBatteryInfo
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFuncCmd_GetTextInputBoxParam
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFuncCmd_SetWidgetValue
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFuncCmd_GetWidgetGroupValue
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFuncCmd_GetWidgetGroupCount
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFuncCmd_GetWidgetListValue
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFuncCmd_GetWidgetListLength
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_GetPayloadProductAlias
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_GetSkyportVersionInfo
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_GetPayloadProductInfo
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_LinkHandShake
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_GetVersion
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_IdentityVerify
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_DealCmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalCmd_SupportState
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalCmd_GetCaliProgress
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalCmd_StartCalibration
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalCmd_ControlJointAngle
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalCmd_ControlAngle
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalCmd_ControlSpeed
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalCmd_ReturnHead
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalCmd_SetGimbalMode
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalCmd_GetGimbalState
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_SupportState
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_GetFocusRingValue
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_SetFocusRingValue
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_GetFocusRingValueUpperBound
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_GetFocusAssistantSettings
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_SetFocusAssistantSettings
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_StopContinuousOpticalZoom
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_StartContinuousOpticalZoom
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_GetOpticalZoomFactor
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_GetOpticalZoomFocalLength
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_SetOpticalZoomFocalLength
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_GetOpticalZoomSpec
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_GetDigitalZoomFactor
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_SetDigitalZoomFactor
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_GetDigitalZoomSpec
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_GetFocusZone
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_SetFocusZone
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_GetFocusMode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_SetFocusMode
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_GetSpotMetering
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_SetSpotMetering
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_GetMeteringMode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_SetMeteringMode
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_FormatSDCard
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_GetSDCardState
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraCmd_GetRecordVideoState
</UL>

<P><STRONG><a name="[1f8]"></a>PsdkProto_DealCmd</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, psdk_proto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = PsdkProto_DealCmd &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_DealFrame
</UL>

<P><STRONG><a name="[1d9]"></a>PsdkProto_Init</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, psdk_proto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = PsdkProto_Init &rArr; PsdkSys_SemaphoreTimedWait &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_SemaphoreTimedWait
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_SemaphoreNew
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_MutexNew
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtParse_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkUpper_Init
</UL>

<P><STRONG><a name="[1fd]"></a>PsdkProto_DeInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, psdk_proto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_SemaphoreDestroy
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_MutexDestroy
</UL>

<P><STRONG><a name="[1dc]"></a>PsdkProto_ProcessReceiveData</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, psdk_proto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = PsdkProto_ProcessReceiveData &rArr; PsdkProto_DealFrame &rArr; PsdkProto_DealCmd &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtParse_AddByte
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_DealFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkUpper_ProcessReceiveData
</UL>

<P><STRONG><a name="[1dd]"></a>PsdkProto_RegSendDataFunc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, psdk_proto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkUpper_RegSendFunction
</UL>

<P><STRONG><a name="[1df]"></a>PsdkProto_RegReceiveDataFunc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, psdk_proto.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkUpper_RegReceiveFunction
</UL>

<P><STRONG><a name="[1e0]"></a>PsdkProt_GetCurrentSendSeq</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, psdk_proto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = PsdkProt_GetCurrentSendSeq &rArr; PsdkSys_MutexUnlock &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_MutexUnlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkOsdkFunc_TransferToOsdk
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_TransferToApp
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_PushMsgToFloatingWindow
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPositioning_GetPos
</UL>

<P><STRONG><a name="[1da]"></a>PsdkProto_RegCmdSetHandler</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, psdk_proto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PsdkProto_RegCmdSetHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkUpper_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkOsdkFunc_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkMsgSub_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkGimbal_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkCamera_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_Init
</UL>

<P><STRONG><a name="[1e2]"></a>PsdkProto_SendGetAck</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, psdk_proto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = PsdkProto_SendGetAck &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Send
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_SemaphoreTimedWait
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_MutexUnlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_MutexLock
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPositioning_GetPos
</UL>

<P><STRONG><a name="[1ef]"></a>PsdkDebug_AssertFailed</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, psdk_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_SemaphoreTimedWait
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_SemaphorePost
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_SemaphoreDestroy
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_MutexUnlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_MutexLock
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_MutexDestroy
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkCrc_Crc32
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkCrc_Crc16
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkCrc_Crc8
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_Decrypt
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_Encrypt
</UL>

<P><STRONG><a name="[1f9]"></a>PsdkProtParse_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, psdk_proto_parse.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Init
</UL>

<P><STRONG><a name="[200]"></a>PsdkProtParse_AddByte</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, psdk_proto_parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = PsdkProtParse_AddByte &rArr; PsdkCrc_Crc32 &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkCrc_Crc32
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkCrc_Crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_ProcessReceiveData
</UL>

<P><STRONG><a name="[1fa]"></a>PsdkSys_MutexNew</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, psdk_arch_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PsdkSys_MutexNew &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Init
</UL>

<P><STRONG><a name="[1fe]"></a>PsdkSys_MutexDestroy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, psdk_arch_sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkDebug_AssertFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_DeInit
</UL>

<P><STRONG><a name="[1f6]"></a>PsdkSys_MutexLock</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, psdk_arch_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = PsdkSys_MutexLock &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkDebug_AssertFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Send
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProt_GetCurrentSendSeq
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendGetAck
</UL>

<P><STRONG><a name="[1f7]"></a>PsdkSys_MutexUnlock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, psdk_arch_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = PsdkSys_MutexUnlock &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkDebug_AssertFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Send
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProt_GetCurrentSendSeq
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendGetAck
</UL>

<P><STRONG><a name="[1fb]"></a>PsdkSys_SemaphoreNew</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, psdk_arch_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PsdkSys_SemaphoreNew &rArr; osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Init
</UL>

<P><STRONG><a name="[1ff]"></a>PsdkSys_SemaphoreDestroy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, psdk_arch_sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkDebug_AssertFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_DeInit
</UL>

<P><STRONG><a name="[1fc]"></a>PsdkSys_SemaphoreTimedWait</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, psdk_arch_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = PsdkSys_SemaphoreTimedWait &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkDebug_AssertFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendGetAck
</UL>

<P><STRONG><a name="[203]"></a>PsdkSys_SemaphorePost</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, psdk_arch_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = PsdkSys_SemaphorePost &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkDebug_AssertFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_DealFrame
</UL>

<P><STRONG><a name="[104]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[207]"></a>osKernelRunning</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>

<P><STRONG><a name="[f9]"></a>osKernelSysTick</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osKernelSysTick &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_FormatSdcard
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_GetSdcardParam
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_GetRecordingState
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_SetRecording
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_GetPhotographyState
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_Photography
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utcTimestampMsgCallback
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_TASK
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPS_TASK
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>osThreadCreate</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TASKCREATE
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20d]"></a>osThreadGetId</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>

<P><STRONG><a name="[108]"></a>osThreadTerminate</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUNINIT_TASK
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TASKCREATE
</UL>

<P><STRONG><a name="[2f7]"></a>osThreadYield</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>osThreadSetPriority</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
</UL>

<P><STRONG><a name="[212]"></a>osThreadGetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGetFromISR
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeCmsisPriority
</UL>

<P><STRONG><a name="[e5]"></a>osDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRIGGER_TASK
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_TASK
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SJ_TASK
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUNINIT_TASK
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_TASK
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_TASK
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_TASK
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAN_TASK
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cam_status_update_TASK
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_TASK
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPS_TASK
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPsdkRecTask
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkTestTask
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpAndShowLogo
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEepromAndShowResultAndSetDoWhit
</UL>

<P><STRONG><a name="[2f8]"></a>osTimerCreate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>osTimerStart</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>osTimerStop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>osTimerDelete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>osSignalSet</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>

<P><STRONG><a name="[21a]"></a>osSignalWait</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>

<P><STRONG><a name="[182]"></a>osMutexCreate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_MutexNew
</UL>

<P><STRONG><a name="[183]"></a>osMutexWait</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Read
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_MutexLock
</UL>

<P><STRONG><a name="[185]"></a>osMutexRelease</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Read
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_MutexUnlock
</UL>

<P><STRONG><a name="[204]"></a>osMutexDelete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_MutexDestroy
</UL>

<P><STRONG><a name="[128]"></a>osSemaphoreCreate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HotShoe_Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_SemaphoreNew
</UL>

<P><STRONG><a name="[129]"></a>osSemaphoreWait</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HotShoe_isTriggered
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HotShoe_Init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_SemaphoreTimedWait
</UL>

<P><STRONG><a name="[12a]"></a>osSemaphoreRelease</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_SemaphorePost
</UL>

<P><STRONG><a name="[205]"></a>osSemaphoreDelete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_SemaphoreDestroy
</UL>

<P><STRONG><a name="[224]"></a>osPoolCreate</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCreate
</UL>

<P><STRONG><a name="[225]"></a>osPoolAlloc</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailAlloc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCAlloc
</UL>

<P><STRONG><a name="[226]"></a>osPoolCAlloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
</UL>

<P><STRONG><a name="[22e]"></a>osPoolFree</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailFree
</UL>

<P><STRONG><a name="[107]"></a>osMessageCreate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TASKCREATE
</UL>

<P><STRONG><a name="[12d]"></a>osMessagePut</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRIGGER_TASK
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUNINIT_TASK
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_TASK
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUpAndShowLogo
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEepromAndShowResultAndSetDoWhit
</UL>

<P><STRONG><a name="[132]"></a>osMessageGet</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osMessageGet &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_TASK
</UL>

<P><STRONG><a name="[228]"></a>osMailCreate</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCreate
</UL>

<P><STRONG><a name="[229]"></a>osMailAlloc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCAlloc
</UL>

<P><STRONG><a name="[22a]"></a>osMailCAlloc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailAlloc
</UL>

<P><STRONG><a name="[22b]"></a>osMailPut</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>

<P><STRONG><a name="[22c]"></a>osMailGet</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>

<P><STRONG><a name="[22d]"></a>osMailFree</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolFree
</UL>

<P><STRONG><a name="[22f]"></a>osSystickHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[230]"></a>osThreadSuspend</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[232]"></a>osThreadResume</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>

<P><STRONG><a name="[235]"></a>osThreadSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>

<P><STRONG><a name="[237]"></a>osThreadResumeAll</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[12f]"></a>osDelayUntil</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osDelayUntil &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_TASK
</UL>

<P><STRONG><a name="[2fc]"></a>osAbortDelay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>osThreadList</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
</UL>

<P><STRONG><a name="[23c]"></a>osMessagePeek</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[23d]"></a>osMessageWaiting</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaitingFromISR
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>

<P><STRONG><a name="[240]"></a>osMessageAvailableSpace</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
</UL>

<P><STRONG><a name="[242]"></a>osMessageDelete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>

<P><STRONG><a name="[243]"></a>osRecursiveMutexCreate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[244]"></a>osRecursiveMutexRelease</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[246]"></a>osRecursiveMutexWait</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>

<P><STRONG><a name="[248]"></a>osSemaphoreGetCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
</UL>

<P><STRONG><a name="[106]"></a>xEventGroupCreate</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, event_groups.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TASKCREATE
</UL>

<P><STRONG><a name="[130]"></a>xEventGroupSetBits</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, event_groups.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_TASK
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupSetBitsCallback
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>

<P><STRONG><a name="[24b]"></a>xEventGroupSync</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>

<P><STRONG><a name="[12e]"></a>xEventGroupWaitBits</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, event_groups.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestWaitCondition
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRIGGER_TASK
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_TASK
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEepromAndShowResultAndSetDoWhit
</UL>

<P><STRONG><a name="[24f]"></a>xEventGroupClearBits</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupClearBitsCallback
</UL>

<P><STRONG><a name="[2fd]"></a>xEventGroupGetBitsFromISR</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, event_groups.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>vEventGroupDelete</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>

<P><STRONG><a name="[251]"></a>vEventGroupSetBitsCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[252]"></a>vEventGroupClearBitsCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>

<P><STRONG><a name="[2fe]"></a>uxEventGroupGetNumber</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, event_groups.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[27c]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[264]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[26c]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[266]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[253]"></a>xQueueGenericReset</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[223]"></a>xQueueGenericCreate</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCreate
</UL>

<P><STRONG><a name="[220]"></a>xQueueGenericSend</STRONG> (Thumb, 350 bytes, Stack size 64 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailPut
</UL>

<P><STRONG><a name="[21c]"></a>xQueueCreateMutex</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRecursiveMutexCreate
</UL>

<P><STRONG><a name="[245]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRecursiveMutexRelease
</UL>

<P><STRONG><a name="[21e]"></a>xQueueGenericReceive</STRONG> (Thumb, 364 bytes, Stack size 64 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePeek
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailGet
</UL>

<P><STRONG><a name="[247]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRecursiveMutexWait
</UL>

<P><STRONG><a name="[222]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>

<P><STRONG><a name="[227]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailPut
</UL>

<P><STRONG><a name="[21f]"></a>xQueueGiveFromISR</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[21d]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailGet
</UL>

<P><STRONG><a name="[261]"></a>xQueuePeekFromISR</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[23f]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreGetCount
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageWaiting
</UL>

<P><STRONG><a name="[241]"></a>uxQueueSpacesAvailable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageAvailableSpace
</UL>

<P><STRONG><a name="[23e]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageWaiting
</UL>

<P><STRONG><a name="[262]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[221]"></a>vQueueDelete</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageDelete
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[2ff]"></a>uxQueueGetQueueNumber</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>vQueueSetQueueNumber</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>ucQueueGetQueueType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>xQueueIsQueueEmptyFromISR</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>xQueueIsQueueFullFromISR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>vQueueAddToRegistry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>pcQueueGetName</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>xTaskCreate</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[20f]"></a>vTaskDelete</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[269]"></a>xTaskIncrementTick</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[238]"></a>xTaskResumeAll</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResumeAll
</UL>

<P><STRONG><a name="[236]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspendAll
</UL>

<P><STRONG><a name="[239]"></a>vTaskDelayUntil</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayUntil
</UL>

<P><STRONG><a name="[216]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[26d]"></a>eTaskGetState</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[214]"></a>uxTaskPriorityGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
</UL>

<P><STRONG><a name="[213]"></a>uxTaskPriorityGetFromISR</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
</UL>

<P><STRONG><a name="[211]"></a>vTaskPrioritySet</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
</UL>

<P><STRONG><a name="[d6]"></a>vTaskSwitchContext</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[231]"></a>vTaskSuspend</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
</UL>

<P><STRONG><a name="[234]"></a>vTaskResume</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
</UL>

<P><STRONG><a name="[233]"></a>xTaskResumeFromISR</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
</UL>

<P><STRONG><a name="[206]"></a>vTaskStartScheduler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[271]"></a>vTaskEndScheduler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
</UL>

<P><STRONG><a name="[20a]"></a>xTaskGetTickCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[209]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[306]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>pcTaskGetName</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>vTaskGetInfo</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskCheckFreeStackSpace
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
</UL>

<P><STRONG><a name="[276]"></a>uxTaskGetSystemState</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
</UL>

<P><STRONG><a name="[25b]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[24c]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>

<P><STRONG><a name="[254]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[24a]"></a>xTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromUnorderedEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
</UL>

<P><STRONG><a name="[259]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[25a]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[256]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[308]"></a>uxTaskGetTaskNumber</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[309]"></a>vTaskSetTaskNumber</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>uxTaskGetStackHighWaterMark</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskCheckFreeStackSpace
</UL>

<P><STRONG><a name="[20e]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>

<P><STRONG><a name="[10a]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
</UL>

<P><STRONG><a name="[25f]"></a>vTaskPriorityInherit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[258]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[23b]"></a>vTaskList</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadList
</UL>

<P><STRONG><a name="[24d]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>

<P><STRONG><a name="[25d]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[278]"></a>ulTaskNotifyTake</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[21b]"></a>xTaskNotifyWait</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
</UL>

<P><STRONG><a name="[219]"></a>xTaskGenericNotify</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[218]"></a>xTaskGenericNotifyFromISR</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[279]"></a>vTaskNotifyGiveFromISR</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[27a]"></a>xTaskNotifyStateClear</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[1d2]"></a>pvPortMalloc</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtoUpper_CalTransferKey
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCreate
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCreate
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_InfoDataToFrame
</UL>

<P><STRONG><a name="[1d6]"></a>vPortFree</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtoUpper_CalTransferKey
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCreate
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCreate
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_InfoDataToFrame
</UL>

<P><STRONG><a name="[30a]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>xPortGetMinimumEverFreeHeapSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[30c]"></a>vPortInitialiseBlocks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>pxPortInitialiseStack</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[280]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[270]"></a>xPortStartScheduler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[272]"></a>vPortEndScheduler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
</UL>

<P><STRONG><a name="[105]"></a>vPortEnterCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRIGGER_TASK
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_TASK
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TASKCREATE
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_sdWrireGpsRtk
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bin
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_version_number
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_writeSetParameter
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_readSetParameter
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
</UL>

<P><STRONG><a name="[109]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRIGGER_TASK
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_TASK
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TASKCREATE
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_sdWrireGpsRtk
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bin
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_version_number
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_writeSetParameter
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_readSetParameter
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
</UL>

<P><STRONG><a name="[10b]"></a>xPortSysTickHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[260]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGetFromISR
</UL>

<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[30d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_libInit
</UL>

<P><STRONG><a name="[125]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPS_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HotShoe_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[30e]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[311]"></a>DMA_DeInit</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_TxConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_RxConfig
</UL>

<P><STRONG><a name="[312]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_TxConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_RxConfig
</UL>

<P><STRONG><a name="[313]"></a>DMA_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAEndOfTransferStatus
</UL>

<P><STRONG><a name="[1a5]"></a>DMA_ClearFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_TxConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_RxConfig
</UL>

<P><STRONG><a name="[316]"></a>DMA_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[317]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPS_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HotShoe_Init
</UL>

<P><STRONG><a name="[319]"></a>EXTI_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[284]"></a>GPIO_DeInit</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[286]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[122]"></a>GPIO_Init</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPS_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HotShoe_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_tim1Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_sdDeInit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_rgbledInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_ds18b20Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>

<P><STRONG><a name="[31d]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cam_status_update_TASK
</UL>

<P><STRONG><a name="[31e]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[31f]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_ds18b20Init
</UL>

<P><STRONG><a name="[166]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledInit
</UL>

<P><STRONG><a name="[321]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[322]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[324]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[325]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[123]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPS_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HotShoe_Init
</UL>

<P><STRONG><a name="[326]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>RCC_DeInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>RCC_HSEConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[287]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[329]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[32b]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[32d]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[32e]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[32f]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[330]"></a>RCC_PCLK1Config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>RCC_PCLK2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>RCC_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[333]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[335]"></a>RCC_LSEConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[336]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[338]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1a2]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_sdDeInit
</UL>

<P><STRONG><a name="[121]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPS_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HotShoe_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_tim1Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_rgbledInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_ds18b20Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_libInit
</UL>

<P><STRONG><a name="[17e]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[285]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[28a]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[339]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[33a]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[33b]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[33c]"></a>RCC_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[33d]"></a>RCC_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[33e]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>SDIO_DeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_sdDeInit
</UL>

<P><STRONG><a name="[1b3]"></a>SDIO_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[33f]"></a>SDIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>SDIO_ClockCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_sdDeInit
</UL>

<P><STRONG><a name="[1a0]"></a>SDIO_SetPowerState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerOFF
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_sdDeInit
</UL>

<P><STRONG><a name="[1b7]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[1c3]"></a>SDIO_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[1c4]"></a>SDIO_DMACmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[1aa]"></a>SDIO_SendCommand</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[340]"></a>SDIO_CmdStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
</UL>

<P><STRONG><a name="[1b1]"></a>SDIO_GetResponse</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[1ac]"></a>SDIO_DataConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DataConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[341]"></a>SDIO_DataStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[342]"></a>SDIO_GetDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>SDIO_ReadData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[343]"></a>SDIO_WriteData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[344]"></a>SDIO_GetFIFOCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[345]"></a>SDIO_StartSDIOReadWait</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[346]"></a>SDIO_StopSDIOReadWait</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[347]"></a>SDIO_SetSDIOReadWaitMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>SDIO_SetSDIOOperation</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[349]"></a>SDIO_SendSDIOSuspendCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[34a]"></a>SDIO_CommandCompletionCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[34b]"></a>SDIO_CEATAITCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[34c]"></a>SDIO_SendCEATACmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[1af]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[34d]"></a>SDIO_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[34e]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>TIM_DeInit</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[175]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_tim1Init
</UL>

<P><STRONG><a name="[34f]"></a>TIM_OC1Init</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[350]"></a>TIM_OC2Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[351]"></a>TIM_OC3Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>TIM_OC4Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_tim1Init
</UL>

<P><STRONG><a name="[291]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[290]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[28f]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[28d]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[28b]"></a>TIM_ICInit</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
</UL>

<P><STRONG><a name="[292]"></a>TIM_PWMIConfig</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
</UL>

<P><STRONG><a name="[352]"></a>TIM_BDTRConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[353]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[354]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[355]"></a>TIM_ICStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[356]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_tim1Disable
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_tim1Enable
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_tim1Init
</UL>

<P><STRONG><a name="[179]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_tim1Disable
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_tim1Enable
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_tim1Init
</UL>

<P><STRONG><a name="[357]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[358]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[359]"></a>TIM_DMAConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[35a]"></a>TIM_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[35b]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[293]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[295]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[297]"></a>TIM_ETRConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[296]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[298]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[35c]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[35d]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[361]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[362]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_tim1Init
</UL>

<P><STRONG><a name="[363]"></a>TIM_SelectCOM</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[364]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[365]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[366]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[367]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[368]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_tim1Init
</UL>

<P><STRONG><a name="[369]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[36a]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[36b]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[36c]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[36d]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[36e]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[370]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[371]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[372]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[373]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[374]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[375]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[376]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[378]"></a>TIM_CCxCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>TIM_CCxNCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>TIM_SelectOCxM</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[37b]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[37c]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[37d]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[37e]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[37f]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[380]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[381]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[382]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[383]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[384]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[385]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[386]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[387]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[388]"></a>TIM_SetClockDivision</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[389]"></a>TIM_GetCapture1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>TIM_GetCapture2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[38b]"></a>TIM_GetCapture3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[38c]"></a>TIM_GetCapture4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[38d]"></a>TIM_GetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[38e]"></a>TIM_GetPrescaler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[38f]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[390]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[391]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[392]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>USART_DeInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[17f]"></a>USART_Init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[393]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[394]"></a>USART_ClockInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[395]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[181]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[396]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[397]"></a>USART_SetAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[398]"></a>USART_WakeUpConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[399]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[39a]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[39b]"></a>USART_LINCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[18c]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[39c]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[39e]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[39f]"></a>USART_SmartCardCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3a0]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3a1]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3a2]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3a3]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3a4]"></a>USART_IrDAConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3a5]"></a>USART_IrDACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[18f]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[18b]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[3a6]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>disk_status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[29b]"></a>disk_initialize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[29c]"></a>disk_read</STRONG> (Thumb, 122 bytes, Stack size 536 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + In Cycle
<LI>Call Chain = disk_read &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[29d]"></a>disk_write</STRONG> (Thumb, 118 bytes, Stack size 536 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + In Cycle
<LI>Call Chain = disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[29e]"></a>disk_ioctl</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = disk_ioctl &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[2bf]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[2a9]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[2a4]"></a>get_fat</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[2a5]"></a>put_fat</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[191]"></a>f_mount</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_RegisteredWorkspace
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_CancleWorkspace
</UL>

<P><STRONG><a name="[197]"></a>f_open</STRONG> (Thumb, 328 bytes, Stack size 608 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1492<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_WriteFileSystem
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bin
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_version_number
</UL>

<P><STRONG><a name="[2c1]"></a>f_read</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
</UL>

<P><STRONG><a name="[19a]"></a>f_write</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_WriteFileSystem
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_version_number
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[2c2]"></a>f_sync</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[19b]"></a>f_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_WriteFileSystem
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bin
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_version_number
</UL>

<P><STRONG><a name="[198]"></a>f_lseek</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_WriteFileSystem
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_version_number
</UL>

<P><STRONG><a name="[193]"></a>f_opendir</STRONG> (Thumb, 104 bytes, Stack size 544 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1396<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_WriteFileSystem
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bin
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_version_number
</UL>

<P><STRONG><a name="[19e]"></a>f_closedir</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = f_closedir &rArr; validate
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bin
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_version_number
</UL>

<P><STRONG><a name="[196]"></a>f_readdir</STRONG> (Thumb, 90 bytes, Stack size 544 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1388<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_WriteFileSystem
</UL>

<P><STRONG><a name="[2c3]"></a>f_stat</STRONG> (Thumb, 68 bytes, Stack size 584 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[2c4]"></a>f_getfree</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[2c5]"></a>f_truncate</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[2c6]"></a>f_unlink</STRONG> (Thumb, 156 bytes, Stack size 624 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[194]"></a>f_mkdir</STRONG> (Thumb, 362 bytes, Stack size 616 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1500<LI>Call Chain = f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_WriteFileSystem
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_version_number
</UL>

<P><STRONG><a name="[2c7]"></a>f_chmod</STRONG> (Thumb, 84 bytes, Stack size 592 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[2c8]"></a>f_rename</STRONG> (Thumb, 248 bytes, Stack size 648 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[2c9]"></a>f_utime</STRONG> (Thumb, 88 bytes, Stack size 584 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[19d]"></a>f_mkfs</STRONG> (Thumb, 1382 bytes, Stack size 72 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = f_mkfs &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_RegisteredWorkspace
</UL>

<P><STRONG><a name="[2ca]"></a>f_gets</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[2cc]"></a>f_putc</STRONG> (Thumb, 60 bytes, Stack size 88 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[2cd]"></a>f_puts</STRONG> (Thumb, 70 bytes, Stack size 96 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[2ce]"></a>f_printf</STRONG> (Thumb, 490 bytes, Stack size 152 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[2b4]"></a>ff_convert</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cc936.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[2b7]"></a>ff_wtoupper</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, cc936.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[29f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[2d1]"></a>_localtime</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, localtime_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[11e]"></a>localtime_r</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_TransferTimeFromLocalToUtc
</UL>

<P><STRONG><a name="[11d]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_TransferTimeFromLocalToUtc
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ReceiveFromMobileSDKFunc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkUpper_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkUpper_SetProductAlias
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_PutStrToBuff
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_GetPayloadProductAlias
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_GetPayloadProductInfo
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_LinkHandShake
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtoUpper_CalTransferKey
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Put
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Get
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ReceiveFromOnboardSDKFunc
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_FrameToInfoData
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_DealFrame
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_InfoDataToFrame
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendGetAck
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_SyncTime
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkMsgSub_RegMsgCallbackList
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkGimbal_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkCamera_Init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_DealFrame
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_KeySetup
</UL>

<P><STRONG><a name="[3a7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[27b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3a8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3a9]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillInUserInfo
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFuncCmd_GetWidgetListValue
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_InfoDataToFrame
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RequestPosition
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkMsgSub_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFuncCmd_GetWidgetListValue
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_final
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_version_number
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_TransferTimeFromLocalToUtc
</UL>

<P><STRONG><a name="[3aa]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[10e]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GetTextInputBoxParamFunc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFuncCmd_GetWidgetListValue
</UL>

<P><STRONG><a name="[e2]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_PushMsgToFloatingWindow
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkTestTask
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_PutStrToBuff
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_IdentityVerify
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtoUpper_CalTransferKey
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_WriteFileSystem
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_usartSendStr
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
</UL>

<P><STRONG><a name="[da]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillInUserInfo
</UL>

<P><STRONG><a name="[d9]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPS_TASK
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillInUserInfo
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
</UL>

<P><STRONG><a name="[199]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_WriteFileSystem
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalEmu_ControlAngle
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_GetOpticalZoomFactor
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPS_TASK
</UL>

<P><STRONG><a name="[2d8]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_ds18b20GetTemp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalEmu_GetGimbalParam
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_GetOpticalZoomFactor
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_GetOpticalZoomFactor
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalEmu_GetGimbalParam
</UL>

<P><STRONG><a name="[15d]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_ds18b20GetTemp
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalEmu_ControlAngle
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalEmu_GetGimbalParam
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_ds18b20GetTemp
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPS_TASK
</UL>

<P><STRONG><a name="[3ab]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CamEmu_GetOpticalZoomFactor
</UL>

<P><STRONG><a name="[3ac]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2d0]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[3ad]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[3ae]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3af]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[3b0]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2d9]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[3b1]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2d6]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[2dc]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2e3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d5]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3b2]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[2db]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[2de]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[3b3]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3b4]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3b5]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[e0]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPS_TASK
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkTestTask
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_WriteFileSystem
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_version_number
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
</UL>

<P><STRONG><a name="[3b6]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3b7]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[2e1]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3b8]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[3b9]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[3ba]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[18a]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>

<P><STRONG><a name="[2d3]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[3bb]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[3bc]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3bd]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3be]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d7]"></a>FillInUserInfo</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = FillInUserInfo &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[5e]"></a>bandWidthMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_msg_push.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> test_msg_push.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>uavAttitudeMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_msg_push.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> test_msg_push.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>batteryInfoMsgCallback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, test_msg_push.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> test_msg_push.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>gpsInfoMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_msg_push.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> test_msg_push.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>uavStateMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_msg_push.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> test_msg_push.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>appDateTimeMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_msg_push.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> test_msg_push.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>baroHeightDataMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_msg_push.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> test_msg_push.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>gpsRawDataMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_msg_push.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> test_msg_push.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>rtkRawDataMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_msg_push.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> test_msg_push.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>utcTimestampMsgCallback</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, test_msg_push.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = utcTimestampMsgCallback &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_VerifyUtcTimestamp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_SyncTime
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPS_GetNewestTriggerTime
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_msg_push.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>otherPayloadTypeMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_msg_push.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> test_msg_push.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>otherPayloadFocalLengthMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_msg_push.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> test_msg_push.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>Test_ReceiveFromOnboardSDKFunc</STRONG> (Thumb, 42 bytes, Stack size 264 bytes, test_osdk_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = Test_ReceiveFromOnboardSDKFunc &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_osdk_func.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>Test_TransferTimeFromLocalToUtc</STRONG> (Thumb, 238 bytes, Stack size 136 bytes, test_positioning.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Test_TransferTimeFromLocalToUtc &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RequestPosition
</UL>

<P><STRONG><a name="[13f]"></a>ReadEepromAndShowResultAndSetDoWhit</STRONG> (Thumb, 708 bytes, Stack size 40 bytes, runinit_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ReadEepromAndShowResultAndSetDoWhit &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_writeSetParameter
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_readSetParameter
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUNINIT_TASK
</UL>

<P><STRONG><a name="[142]"></a>PowerUpAndShowLogo</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, runinit_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PowerUpAndShowLogo &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUNINIT_TASK
</UL>

<P><STRONG><a name="[148]"></a>i2c_Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cocoguojia_24c02.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>

<P><STRONG><a name="[155]"></a>delay_us1</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, cocoguojia_ds18b20.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Bit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
</UL>

<P><STRONG><a name="[154]"></a>DS18B20_Check</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cocoguojia_ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DS18B20_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us1
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_ds18b20Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_ds18b20GetTemp
</UL>

<P><STRONG><a name="[158]"></a>delay_us</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, cocoguojia_ds18b20.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Bit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
</UL>

<P><STRONG><a name="[156]"></a>DS18B20_Rst</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cocoguojia_ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DS18B20_Rst
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us750
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_ds18b20Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_ds18b20GetTemp
</UL>

<P><STRONG><a name="[15b]"></a>DS18B20_Write_Byte</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, cocoguojia_ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DS18B20_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us1
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_ds18b20GetTemp
</UL>

<P><STRONG><a name="[157]"></a>delay_us750</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, cocoguojia_ds18b20.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
</UL>

<P><STRONG><a name="[15c]"></a>DS18B20_Read_Byte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cocoguojia_ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DS18B20_Read_Byte &rArr; DS18B20_Read_Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_ds18b20GetTemp
</UL>

<P><STRONG><a name="[15f]"></a>DS18B20_Read_Bit</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, cocoguojia_ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DS18B20_Read_Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us1
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Byte
</UL>

<P><STRONG><a name="[16f]"></a>OLED_ShowCharFanBai</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_ShowCharFanBai &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStringFanBai
</UL>

<P><STRONG><a name="[174]"></a>delay_oled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cocoguojia_oled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cocoguojia_oledInit
</UL>

<P><STRONG><a name="[1a4]"></a>SD_DMA_RxConfig</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SD_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[1a8]"></a>SD_DMA_TxConfig</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[1a9]"></a>FindSCR</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[1b0]"></a>SDEnWideBus</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[1b5]"></a>CmdResp2Error</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[1cc]"></a>IsCardProgramming</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, cocoguojia_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
</UL>

<P><STRONG><a name="[1c7]"></a>SD_DMAEndOfTransferStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
</UL>

<P><STRONG><a name="[1ab]"></a>CmdResp1Error</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[1b8]"></a>CmdResp6Error</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, cocoguojia_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[1d1]"></a>PsdkProtoUpper_CalTransferKey</STRONG> (Thumb, 206 bytes, Stack size 128 bytes, psdk_upper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = PsdkProtoUpper_CalTransferKey &rArr; md5_update &rArr; md5_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_final
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkUpper_Init
</UL>

<P><STRONG><a name="[90]"></a>PsdkPayloadStateCmd_IdentityVerify</STRONG> (Thumb, 110 bytes, Stack size 200 bytes, psdk_upper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = PsdkPayloadStateCmd_IdentityVerify &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_final
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_PutStrToBuff
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_upper.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>PsdkPayloadStateCmd_GetVersion</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_upper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = PsdkPayloadStateCmd_GetVersion &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_upper.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>PsdkPayloadStateCmd_LinkHandShake</STRONG> (Thumb, 50 bytes, Stack size 56 bytes, psdk_upper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = PsdkPayloadStateCmd_LinkHandShake &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_upper.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>PsdkPayloadStateCmd_GetPayloadProductInfo</STRONG> (Thumb, 74 bytes, Stack size 136 bytes, psdk_upper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = PsdkPayloadStateCmd_GetPayloadProductInfo &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_upper.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>PsdkPayloadStateCmd_GetSkyportVersionInfo</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, psdk_upper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = PsdkPayloadStateCmd_GetSkyportVersionInfo &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_upper.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>PsdkPayloadStateCmd_GetPayloadProductAlias</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, psdk_upper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = PsdkPayloadStateCmd_GetPayloadProductAlias &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_upper.o(.constdata)
</UL>
<P><STRONG><a name="[1d7]"></a>Str_PutStrToBuff</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_upper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Str_PutStrToBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_IdentityVerify
</UL>

<P><STRONG><a name="[96]"></a>AppFuncCmd_TT_AppToLoad</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, psdk_app_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AppFuncCmd_TT_AppToLoad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_app_func.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>AppFuncCmd_GetWidgetListLength</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, psdk_app_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = AppFuncCmd_GetWidgetListLength &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_app_func.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>AppFuncCmd_GetWidgetListValue</STRONG> (Thumb, 224 bytes, Stack size 232 bytes, psdk_app_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = AppFuncCmd_GetWidgetListValue &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_app_func.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>AppFuncCmd_GetWidgetGroupCount</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, psdk_app_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = AppFuncCmd_GetWidgetGroupCount &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_app_func.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>AppFuncCmd_GetWidgetGroupValue</STRONG> (Thumb, 266 bytes, Stack size 152 bytes, psdk_app_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = AppFuncCmd_GetWidgetGroupValue &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_app_func.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>AppFuncCmd_SetWidgetValue</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, psdk_app_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = AppFuncCmd_SetWidgetValue &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_app_func.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>AppFuncCmd_GetTextInputBoxParam</STRONG> (Thumb, 72 bytes, Stack size 96 bytes, psdk_app_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = AppFuncCmd_GetTextInputBoxParam &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_app_func.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>MsgPushCmd_PushBandWidth</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, psdk_msg_subcribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MsgPushCmd_PushBandWidth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_msg_subcribe.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>MsgPushCmd_PushAttitude</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, psdk_msg_subcribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MsgPushCmd_PushAttitude
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_msg_subcribe.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>MsgPushCmd_PushBatteryInfo</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, psdk_msg_subcribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = MsgPushCmd_PushBatteryInfo &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_msg_subcribe.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>MsgPushCmd_PushGpsInfo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, psdk_msg_subcribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MsgPushCmd_PushGpsInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_msg_subcribe.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>MsgPushCmd_PushUavState</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, psdk_msg_subcribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MsgPushCmd_PushUavState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_msg_subcribe.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>MsgPushCmd_PushAppDateTime</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, psdk_msg_subcribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MsgPushCmd_PushAppDateTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_msg_subcribe.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>MsgPushCmd_PushBaroHeight</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, psdk_msg_subcribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MsgPushCmd_PushBaroHeight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_msg_subcribe.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>MsgPushCmd_GpsRawData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, psdk_msg_subcribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MsgPushCmd_GpsRawData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_msg_subcribe.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>MsgPushCmd_RtkRawData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, psdk_msg_subcribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MsgPushCmd_RtkRawData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_msg_subcribe.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>MsgPushCmd_UtcTimestamp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, psdk_msg_subcribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MsgPushCmd_UtcTimestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_msg_subcribe.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>MsgPushCmd_OtherPayloadType</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, psdk_msg_subcribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MsgPushCmd_OtherPayloadType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_msg_subcribe.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>MsgPushCmd_OtherPayloadFocalLength</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, psdk_msg_subcribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MsgPushCmd_OtherPayloadFocalLength
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_msg_subcribe.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>CameraCmd_SetMode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_SetMode &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>CameraCmd_GetMode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_GetMode &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>CameraCmd_ShootPhoto</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_ShootPhoto &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>CameraCmd_GetShootPhotoState</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_GetShootPhotoState &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>CameraCmd_SetShootPhotoMode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_SetShootPhotoMode &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>CameraCmd_GetShootPhotoMode</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = CameraCmd_GetShootPhotoMode &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>CameraCmd_RecordVideo</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_RecordVideo &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>CameraCmd_GetRecordVideoState</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_GetRecordVideoState &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>CameraCmd_GetSDCardState</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = CameraCmd_GetSDCardState &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>CameraCmd_FormatSDCard</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_FormatSDCard &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>CameraCmd_SetMeteringMode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_SetMeteringMode &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>CameraCmd_GetMeteringMode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_GetMeteringMode &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>CameraCmd_SetSpotMetering</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_SetSpotMetering &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>CameraCmd_GetSpotMetering</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_GetSpotMetering &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>CameraCmd_SetFocusMode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_SetFocusMode &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>CameraCmd_GetFocusMode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_GetFocusMode &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>CameraCmd_SetFocusZone</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_SetFocusZone &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>CameraCmd_GetFocusZone</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = CameraCmd_GetFocusZone &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>CameraCmd_GetDigitalZoomSpec</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = CameraCmd_GetDigitalZoomSpec &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>CameraCmd_SetDigitalZoomFactor</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_SetDigitalZoomFactor &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>CameraCmd_GetDigitalZoomFactor</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = CameraCmd_GetDigitalZoomFactor &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>CameraCmd_GetOpticalZoomSpec</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = CameraCmd_GetOpticalZoomSpec &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>CameraCmd_SetOpticalZoomFocalLength</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_SetOpticalZoomFocalLength &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>CameraCmd_GetOpticalZoomFocalLength</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_GetOpticalZoomFocalLength &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>CameraCmd_GetOpticalZoomFactor</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = CameraCmd_GetOpticalZoomFactor &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>CameraCmd_StartContinuousOpticalZoom</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_StartContinuousOpticalZoom &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>CameraCmd_StopContinuousOpticalZoom</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_StopContinuousOpticalZoom &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>CameraCmd_SetFocusAssistantSettings</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_SetFocusAssistantSettings &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>CameraCmd_GetFocusAssistantSettings</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_GetFocusAssistantSettings &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>CameraCmd_GetFocusRingValueUpperBound</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_GetFocusRingValueUpperBound &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>CameraCmd_SetFocusRingValue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_SetFocusRingValue &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>CameraCmd_GetFocusRingValue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_GetFocusRingValue &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>CameraCmd_SupportState</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, psdk_payload_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CameraCmd_SupportState &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_camera.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>GimbalCmd_GetGimbalState</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, psdk_payload_gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = GimbalCmd_GetGimbalState &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_gimbal.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>GimbalCmd_SetGimbalMode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = GimbalCmd_SetGimbalMode &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_gimbal.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>GimbalCmd_ReturnHead</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = GimbalCmd_ReturnHead &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_gimbal.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>GimbalCmd_ControlSpeed</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = GimbalCmd_ControlSpeed &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_gimbal.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>GimbalCmd_ControlAngle</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = GimbalCmd_ControlAngle &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_gimbal.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>GimbalCmd_ControlJointAngle</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = GimbalCmd_ControlJointAngle &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_gimbal.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>GimbalCmd_StartCalibration</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = GimbalCmd_StartCalibration &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_gimbal.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>GimbalCmd_GetCaliProgress</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psdk_payload_gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = GimbalCmd_GetCaliProgress &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_gimbal.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>GimbalCmd_SupportState</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, psdk_payload_gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = GimbalCmd_SupportState &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_gimbal.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>OsdkFuncCmd_TT_OsdkToLoad</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, psdk_osdk_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OsdkFuncCmd_TT_OsdkToLoad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_osdk_func.o(.constdata)
</UL>
<P><STRONG><a name="[1e4]"></a>PsdkAes_SubWord</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, psdk_aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PsdkAes_SubWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_KeySetup
</UL>

<P><STRONG><a name="[1e3]"></a>PsdkAes_KeySetup</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, psdk_aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PsdkAes_KeySetup &rArr; PsdkAes_SubWord
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SubWord
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_Decrypt
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_Encrypt
</UL>

<P><STRONG><a name="[1e6]"></a>PsdkAes_AddRoundKey</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, psdk_aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PsdkAes_AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SetupDecrypt
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SetupEncrypt
</UL>

<P><STRONG><a name="[1e7]"></a>PsdkAes_SubBytes</STRONG> (Thumb, 260 bytes, Stack size 0 bytes, psdk_aes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SetupEncrypt
</UL>

<P><STRONG><a name="[1ec]"></a>PsdkAes_InvSubBytes</STRONG> (Thumb, 260 bytes, Stack size 0 bytes, psdk_aes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SetupDecrypt
</UL>

<P><STRONG><a name="[1e8]"></a>PsdkAes_ShiftRows</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, psdk_aes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SetupEncrypt
</UL>

<P><STRONG><a name="[1eb]"></a>PsdkAes_InvShiftRows</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, psdk_aes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SetupDecrypt
</UL>

<P><STRONG><a name="[1e9]"></a>PsdkAes_MixColumns</STRONG> (Thumb, 534 bytes, Stack size 20 bytes, psdk_aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PsdkAes_MixColumns
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SetupEncrypt
</UL>

<P><STRONG><a name="[1ed]"></a>PsdkAes_InvMixColumns</STRONG> (Thumb, 524 bytes, Stack size 20 bytes, psdk_aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PsdkAes_InvMixColumns
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SetupDecrypt
</UL>

<P><STRONG><a name="[1e5]"></a>PsdkAes_SetupEncrypt</STRONG> (Thumb, 628 bytes, Stack size 40 bytes, psdk_aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PsdkAes_SetupEncrypt &rArr; PsdkAes_MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_MixColumns
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_ShiftRows
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SubBytes
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_Encrypt
</UL>

<P><STRONG><a name="[1f5]"></a>PsdkProto_InfoDataToFrame</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, psdk_proto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkCrc_Crc32
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkCrc_Crc16
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_Encrypt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Send
</UL>

<P><STRONG><a name="[201]"></a>PsdkProto_DealFrame</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, psdk_proto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = PsdkProto_DealFrame &rArr; PsdkProto_DealCmd &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkSys_SemaphorePost
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_DealCmd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_FrameToInfoData
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_ProcessReceiveData
</UL>

<P><STRONG><a name="[202]"></a>PsdkProto_FrameToInfoData</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, psdk_proto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = PsdkProto_FrameToInfoData &rArr; PsdkAes_Decrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_Decrypt
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_DealFrame
</UL>

<P><STRONG><a name="[20b]"></a>makeFreeRtosPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
</UL>

<P><STRONG><a name="[215]"></a>makeCmsisPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
</UL>

<P><STRONG><a name="[208]"></a>inHandlerMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageDelete
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageWaiting
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailGet
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailPut
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[24e]"></a>prvTestWaitCondition</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, event_groups.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[255]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[257]"></a>prvCopyDataToQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[25c]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[25e]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[263]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[26b]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[26e]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[4c]"></a>prvIdleTask</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[275]"></a>prvListTasksWithinSingleList</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[265]"></a>prvInitialiseNewTask</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[268]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[267]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[26f]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[274]"></a>prvTaskCheckFreeStackSpace</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[27f]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[27e]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[4d]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[283]"></a>SetSysClockTo72</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[28e]"></a>TI2_Config</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[28c]"></a>TI1_Config</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[2a0]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[2a1]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[2a2]"></a>sync_fs</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[2a6]"></a>remove_chain</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
</UL>

<P><STRONG><a name="[2a7]"></a>create_chain</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[2a8]"></a>dir_sdi</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[2aa]"></a>dir_next</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[2ab]"></a>dir_find</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2ae]"></a>dir_read</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[2af]"></a>dir_register</STRONG> (Thumb, 406 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 884<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[2b2]"></a>dir_remove</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[2b3]"></a>get_fileinfo</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_fileinfo &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
</UL>

<P><STRONG><a name="[2b5]"></a>create_name</STRONG> (Thumb, 512 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = create_name &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[2b8]"></a>follow_path</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 852<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
</UL>

<P><STRONG><a name="[2bc]"></a>get_ldnumber</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[2ba]"></a>check_fs</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[2bb]"></a>find_volume</STRONG> (Thumb, 628 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
</UL>

<P><STRONG><a name="[2be]"></a>validate</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[2cb]"></a>putc_bfd</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>

<P><STRONG><a name="[2b0]"></a>mem_cpy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2a3]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[2b6]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[2b9]"></a>ld_clust</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[2c0]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[2ac]"></a>cmp_lfn</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[2b1]"></a>gen_numname</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gen_numname
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2ad]"></a>sum_sfn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[2e2]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e0]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[2e5]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e4]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4f]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[4e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
